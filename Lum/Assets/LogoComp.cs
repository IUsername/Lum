//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Xaml.Controls;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace AnimatedVisuals
{
    sealed class LogoComp : IAnimatedVisualSource
    {
        public IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            if (!IsRuntimeCompatible())
            {
                return null;
            }
            return new AnimatedVisual(compositor);
        }

        static bool IsRuntimeCompatible()
        {
            if (!Windows.Foundation.Metadata.ApiInformation.IsTypePresent("Windows.UI.Composition.CompositionGeometricClip"))
            {
                return false;
            }
            return true;
        }

        sealed class AnimatedVisual : IAnimatedVisual
        {
            const long c_durationTicks = 23020000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionColorBrush _colorBrush_Red;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            StepEasingFunction _holdThenStepEasingFunction;
            ContainerVisual _root;
            ExpressionAnimation _scalarExpressionAnimation;
            StepEasingFunction _stepThenHoldEasingFunction;
            ScalarKeyFrameAnimation _trimEndScalarAnimation_1_to_0p5;
            ScalarKeyFrameAnimation _trimStartScalarAnimation_0_to_0p5;

            CompositionColorBrush ColorBrush_Red()
            {
                //return _colorBrush_Red = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFF, 0x00, 0x00));
                return _colorBrush_Red = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x9F, 0x0D, 0x0D));
            }

            CompositionContainerShape ContainerShape_0()
            {
                var result = _c.CreateContainerShape();
                result.TransformMatrix = new Matrix3x2(1, 0, 0, 1, 34.5F, 37.5F);
                var shapes = result.Shapes;
                shapes.Add(SpriteShape_0());
                shapes.Add(SpriteShape_1());
                shapes.Add(ContainerShape_1());
                return result;
            }

            // ShapeGroup: Group 1
            CompositionContainerShape ContainerShape_1()
            {
                var result = _c.CreateContainerShape();
                var propertySet = result.Properties;
                propertySet.InsertVector2("Position", new Vector2(155.630005F, 167.106995F));
                var shapes = result.Shapes;
                shapes.Add(SpriteShape_2());
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "Vector2((my.Position.X),(my.Position.Y))";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("Offset", _reusableExpressionAnimation);
                result.StartAnimation("Position", PositionVector2Animation());
                var controller = result.TryGetAnimationController("Position");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0), new Vector2(0.666999996F, 1));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0), new Vector2(0.971000016F, 0.847000003F));
            }

            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-22.9139996F, 129.337006F));
                    builder.AddLine(new Vector2(-129.337006F, 22.9139996F));
                    builder.AddCubicBezier(new Vector2(-141.940002F, 10.3109999F), new Vector2(-141.940002F, -10.3109999F), new Vector2(-129.337006F, -22.9139996F));
                    builder.AddLine(new Vector2(-22.9139996F, -129.337006F));
                    builder.AddCubicBezier(new Vector2(-10.3109999F, -141.940002F), new Vector2(10.3109999F, -141.940002F), new Vector2(22.9139996F, -129.337006F));
                    builder.AddLine(new Vector2(129.337006F, -22.9139996F));
                    builder.AddCubicBezier(new Vector2(141.940002F, -10.3109999F), new Vector2(141.940002F, 10.3109999F), new Vector2(129.337006F, 22.9139996F));
                    builder.AddLine(new Vector2(22.9139996F, 129.337006F));
                    builder.AddCubicBezier(new Vector2(10.3109999F, 141.940002F), new Vector2(-10.3109999F, 141.940002F), new Vector2(-22.9139996F, 129.337006F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-112.537003F, 20.6439991F));
                    builder.AddCubicBezier(new Vector2(-102.990997F, 9.03299999F), new Vector2(-86.552002F, -7.33500004F), new Vector2(-62.9199982F, -13.1920004F));
                    builder.AddCubicBezier(new Vector2(-32.8549995F, -20.6439991F), new Vector2(-12.4399996F, -5.80499983F), new Vector2(34.8759995F, 3.91599989F));
                    builder.AddCubicBezier(new Vector2(52.2229996F, 7.48000002F), new Vector2(78.7259979F, 11.4940004F), new Vector2(112.537003F, 10.7589998F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(40.8180008F, -34.526001F));
                    builder.AddCubicBezier(new Vector2(46.1459999F, -26.2049999F), new Vector2(49.257F, -16.1679993F), new Vector2(49.257F, -5.36199999F));
                    builder.AddCubicBezier(new Vector2(49.257F, 23.4050007F), new Vector2(27.2049999F, 46.723999F), new Vector2(0.00100000005F, 46.723999F));
                    builder.AddCubicBezier(new Vector2(-27.2040005F, 46.723999F), new Vector2(-49.257F, 23.4050007F), new Vector2(-49.257F, -5.36199999F));
                    builder.AddCubicBezier(new Vector2(-49.257F, -22.2180004F), new Vector2(-41.6839981F, -37.2039986F), new Vector2(-29.941F, -46.723999F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame  = true;
                return result;
            }

            // Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
                result.StartAnimation("TrimStart", TrimStartScalarAnimation_0_to_0p5());
                var controller = result.TryGetAnimationController("TrimStart");
                controller.Pause();
                controller.StartAnimation("Progress", ScalarExpressionAnimation());
                result.StartAnimation("TrimEnd", TrimEndScalarAnimation_1_to_0p5());
                controller = result.TryGetAnimationController("TrimEnd");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_1()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
                result.StartAnimation("TrimStart", _trimStartScalarAnimation_0_to_0p5);
                var controller = result.TryGetAnimationController("TrimStart");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                result.StartAnimation("TrimEnd", _trimEndScalarAnimation_1_to_0p5);
                controller = result.TryGetAnimationController("TrimEnd");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // ShapeGroup: Group 1
            //   Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_2()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
                result.StartAnimation("TrimStart", _trimStartScalarAnimation_0_to_0p5);
                var controller = result.TryGetAnimationController("TrimStart");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                result.StartAnimation("TrimEnd", _trimEndScalarAnimation_1_to_0p5);
                controller = result.TryGetAnimationController("TrimEnd");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // Position
            Vector2KeyFrameAnimation PositionVector2Animation()
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.SetReferenceParameter("_", _root);
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, new Vector2(155.630005F, 167.106995F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.101449274F, new Vector2(155.630005F, 167.106995F), _holdThenStepEasingFunction);
                result.InsertExpressionKeyFrame(0.188405693F, "(Pow(1 - _.t0, 3) * Vector2(155.63,167.107)) + (3 * Square(1 - _.t0) * _.t0 * Vector2(156.297,167.44)) + (3 * (1 - _.t0) * Square(_.t0) * Vector2(159.743,169.22)) + (Pow(_.t0, 3) * Vector2(159.63,169.107))", _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.188405797F, new Vector2(159.630005F, 169.106995F), _stepThenHoldEasingFunction);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0);
                propertySet.InsertScalar("t0", 0);
                var children = result.Children;
                children.InsertAtTop(ShapeVisual());
                result.StartAnimation("t0", t0ScalarAnimation_0_to_1());
                var controller = result.TryGetAnimationController("t0");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            ExpressionAnimation ScalarExpressionAnimation()
            {
                var result = _scalarExpressionAnimation = _c.CreateExpressionAnimation();
                result.SetReferenceParameter("_", _root);
                result.Expression = "_.Progress";
                return result;
            }

            ShapeVisual ShapeVisual()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(400, 400);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_0());
                return result;
            }

            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(1, 0, 0, 1, 165.399002F, 162.229004F);
                result.Geometry = PathGeometry_0();
                result.StrokeBrush = ColorBrush_Red();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 10;
                result.StrokeThickness = 17;
                return result;
            }

            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(1, 0, 0, 1, 185.093002F, 134.354004F);
                result.Geometry = PathGeometry_1();
                result.StrokeBrush = _colorBrush_Red;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 10;
                result.StrokeThickness = 17;
                return result;
            }

            // ShapeGroup: Group 1
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape();
                result.Geometry = PathGeometry_2();
                result.StrokeBrush = _colorBrush_Red;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 10;
                result.StrokeThickness = 17;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame  = true;
                return result;
            }

            ScalarKeyFrameAnimation t0ScalarAnimation_0_to_1()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0.10144937F, 0, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.188405693F, 1, CubicBezierEasingFunction_1());
                return result;
            }

            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_1_to_0p5()
            {
                var result = _trimEndScalarAnimation_1_to_0p5 = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 1, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.492753595F, 1, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.869565189F, 0.5F, _cubicBezierEasingFunction_0);
                return result;
            }

            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0_to_0p5()
            {
                var result = _trimStartScalarAnimation_0_to_0p5 = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0, StepThenHoldEasingFunction());
                result.InsertKeyFrame(0.623188376F, 0, HoldThenStepEasingFunction());
                result.InsertKeyFrame(0.869565189F, 0.5F, CubicBezierEasingFunction_0());
                return result;
            }

            internal AnimatedVisual(Compositor compositor)
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            Visual IAnimatedVisual.RootVisual => _root;
            TimeSpan IAnimatedVisual.Duration => TimeSpan.FromTicks(c_durationTicks);
            Vector2 IAnimatedVisual.Size => new Vector2(400, 400);
            void IDisposable.Dispose() => _root?.Dispose();
        }
    }
}
